import java.util.*;
public class Sum{
    public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 System.out.println("enter number one ");
 int num1=sc.nextInt();
System.out.println("enter number two");
 int num2=sc.nextInt();
int sum= num1+num2;
System.out.println(sum);

    }
}

THIS PROGRAM TAKES INPUT FROM THE USER TO GIVE SUM AS OUTPUT NOW IF WE WANT TO GET THE SUM 100 TIMES WE CANNOT PRATICALLY WRITE THE SAME PIECE OF CODE AGAIN AND AGAIN 
BECAUSE IF THERE IS A CHANGE IN PROGRAM WE HAVE TO CHANGE IT IN EVERY PIECE OF CODE 100 TIMES WHICH IS NOT EFFECIENT PRACTICE 
TO REUSE THE SAME PIECE OF CODE FOR A NUMBBER OF TIMES WE CREATE A FUNCTION / METHOD IN JAVA 
METHOD IN JAVA IS DEFINED IN A CLASS AND IS INVOKED BY THE METHOD NAME 

import java.util.*;
public class Sum{
    public static void main(String args[]){
        sum();                             //calling out or invoking function as many times we want without repeating the code 
        sum();
    }
    static void sum(){                    // declaring a function sum which takes input from users and performs operation of addition 
 Scanner sc=new Scanner(System.in);       // making object of scanner class 
 System.out.println("enter number one ");
 int num1=sc.nextInt();                   //input 
 System.out.println("enter number two");
 int num2=sc.nextInt();                   //input 
 int sum= num1+num2;
 System.out.println(sum);

    }
}



NOW INSTEAD OF PRINTING THE SUM 
WE TAKE SUM AS A RETURN TYPE 
WE WILL RETURN THE VALUE OF SUM 

IN THIS EXAMPLE WE CREATE A REFRENCE VARIABLE CALLED AS ANS TO HOLD THE RETURN VALUE OF SUM 
the void will get replaced by int as a return type as  we return a value 



import java.util.*;
public class Sum{                             // we can call the function as many times we want it without repeating code 
    public static void main(String args[]){
        int ans=sum();                       //the value returned from sum method gets assigned to refrence variable ans  
       System.out.println(ans);              // and then it gets printed 
    }
    static int sum(){                        // return type changes to int 
 Scanner sc=new Scanner(System.in);
 System.out.println("enter number one ");
 int num1=sc.nextInt();
System.out.println("enter number two");
 int num2=sc.nextInt();
int sum= num1+num2;
return sum; 

    }
}


after return statement function over we cant put any opration or any print statement after that in that function 
if you put a return type you are supposed to return a value otherwise it give error 
also the return type value declared and the return value type should match you can't declare string type and return int value 


public class Display{
    public static void main(String[] args) {
       greeting();
       
    }
    static void greeting(){
        System.out.println("hello world function display");
    }
}




MAIN FUNCTION IS THE FIRST FUNCTION THAT WORKS 


public class Display{
    public static void main(String[] args) {
       String message = greet();                 // refrence variable message will store the return string value into message 
       System.out.println(message);
    }
    static String greet(){                       // return type as String 
String greeting="hello world string return";
return greeting;

       
    }
}

PASSING THE VALUE OF PARAMETERS ALONG WITH THE METHOD 

public class ParameterIntoMethod{
    public static void main(String[] args) {
        int ans=sum3(20,30);         // NOW IF WE DECLARE THE PARAMETERS WE HAVE TO PASS THE VALUE OF PARAMETERS WHEN WE INVOKE OR CALL THE FUNCTION SEQUENCE SHOULD BE SAME AS THAT OF DECLARATION OF ARGUMENTS 
        System.out.println(ans);
    }

    static int sum3(int a, int b){   // DECLARING PARAMETERS OR ARGUMENTS WITH DATATYPE 
    int sum= a+b;                     
    return sum;
    }
}
